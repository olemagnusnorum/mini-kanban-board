{"ast":null,"code":"var _jsxFileName = \"/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/projectbard.js\";\nimport Column from \"./column\";\nimport React, { Component } from \"react\"; //muligen ha alle projects state her og hvilken colonne de hører til, slik at jeg kan pase ned riktig\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectBoard extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      backlogProjects: [],\n      inProgressProjects: [],\n      doneProjects: [],\n      inputBox: false\n    };\n\n    this.addProjects = () => {\n      this.setState({\n        inputBox: true\n      });\n      console.log(this.state.inputBox);\n    };\n\n    this.cancelProject = () => {\n      this.setState({\n        inputBox: false\n      });\n    };\n\n    this.moveToInProgress = (id, fromColumn) => {\n      var project;\n\n      if (fromColumn == \"backlog\") {\n        project = this.state.backlogProjects.filter(item => item.projectId == id)[0];\n        const newProjectList = this.state.backlogProjects.filter(item => item.projectId !== id);\n        this.setState({\n          backlogProjects: newProjectList\n        });\n      }\n    };\n  }\n\n  async componentDidMount() {\n    var arr = [];\n    console.log(\"inif\");\n    var data = await this.fetchProjects();\n    console.log(data[0].id);\n    data.map(d => {\n      const project = {\n        projectId: d.id,\n        projectName: d.name,\n        projectDescription: d.description\n      };\n      arr.push(project);\n    });\n    console.log(arr);\n    this.setState({\n      backlogProjects: [...this.state.backlogProjects, ...arr]\n    });\n  } //må bruke DELETE fetch\n\n\n  async removeProjectReal(id, column) {\n    if (column == \"backlog\") {\n      const response = await this.deleteProject(id);\n      console.log(response);\n      const newProjectList = this.state.backlogProjects.filter(item => item.projectId !== id);\n      this.setState({\n        backlogProjects: newProjectList\n      });\n    }\n  }\n\n  //her må vi poste til backend\n  async saveProject(newProject) {\n    const body = {\n      Name: newProject.projectName,\n      Description: newProject.projectDescription\n    };\n    const data = await this.postProject(body);\n    console.log(data); //need to have data on right format\n\n    const project = {\n      projectId: data.id,\n      projectName: data.name,\n      projectDescription: data.description\n    };\n    this.setState({\n      backlogProjects: [...this.state.backlogProjects, project],\n      inputBox: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"projectboard\",\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        id: \"done\",\n        name: \"Done\",\n        inputBox: this.state.inputBox,\n        projects: this.state.doneProjects,\n        removeProjectReal: this.removeProjectReal.bind(this),\n        addProjects: this.addProjects,\n        saveProject: this.saveProject.bind(this),\n        cancelProject: this.cancelProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        id: \"in-progress\",\n        name: \"In Progress\",\n        inputBox: this.state.inputBox,\n        projects: this.state.inProgressProjects,\n        removeProjectReal: this.removeProjectReal.bind(this),\n        addProjects: this.addProjects,\n        saveProject: this.saveProject.bind(this),\n        cancelProject: this.cancelProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        id: \"backlog\",\n        name: \"Backlog\",\n        inputBox: this.state.inputBox,\n        projects: this.state.backlogProjects,\n        removeProjectReal: this.removeProjectReal.bind(this),\n        addProjects: this.addProjects,\n        saveProject: this.saveProject.bind(this),\n        cancelProject: this.cancelProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n  async fetchProjects() {\n    console.log(\"in fetch\");\n    const response = await fetch('http://localhost:5000/api/projects');\n    return response.json();\n  }\n\n  async postProject(body) {\n    console.log(\"in save\");\n    const response = await fetch('http://localhost:5000/api/projects', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    return response.json();\n  }\n\n  async deleteProject(id) {\n    const response = await fetch(`http://localhost:5000/api/projects/${id}`, {\n      method: 'DELETE',\n      mode: 'cors'\n    });\n    return response;\n  }\n\n}\n\nexport default ProjectBoard;","map":{"version":3,"sources":["/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/projectbard.js"],"names":["Column","React","Component","ProjectBoard","state","backlogProjects","inProgressProjects","doneProjects","inputBox","addProjects","setState","console","log","cancelProject","moveToInProgress","id","fromColumn","project","filter","item","projectId","newProjectList","componentDidMount","arr","data","fetchProjects","map","d","projectName","name","projectDescription","description","push","removeProjectReal","column","response","deleteProject","saveProject","newProject","body","Name","Description","postProject","render","bind","fetch","json","method","mode","headers","JSON","stringify"],"mappings":"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","sourcesContent":["import Column from \"./column\"\nimport React, {Component} from \"react\"\n\n\n//muligen ha alle projects state her og hvilken colonne de hører til, slik at jeg kan pase ned riktig\n\n\nclass ProjectBoard extends Component {\n\n    state = {\n        backlogProjects: [],\n        inProgressProjects: [],\n        doneProjects: [],\n        inputBox: false\n    }\n\n\n    async componentDidMount() {\n       \n        var arr = []\n        \n        console.log(\"inif\")\n        var data = await this.fetchProjects()\n        console.log(data[0].id)\n        data.map(d => {\n            const project = {projectId: d.id, projectName: d.name, projectDescription: d.description}\n            arr.push(project)\n        })\n        console.log(arr)\n        \n        \n        this.setState({backlogProjects: [...this.state.backlogProjects, ...arr]})\n\n    }\n    \n    \n\n    //må bruke DELETE fetch\n    async removeProjectReal(id, column) {\n        if (column == \"backlog\"){\n            const response = await this.deleteProject(id)\n            console.log(response)\n            const newProjectList = this.state.backlogProjects.filter((item) => item.projectId !== id );\n            this.setState({\n                backlogProjects: newProjectList\n            })\n        }\n\n    }\n    \n     \n    addProjects = () => {\n        this.setState({\n            inputBox: true\n        })\n        console.log(this.state.inputBox)\n    }\n    \n    \n    //her må vi poste til backend\n    async saveProject(newProject) {\n        const body = { Name: newProject.projectName, Description: newProject.projectDescription}\n        const data = await this.postProject(body)\n        console.log(data)\n        //need to have data on right format\n        const project = {projectId: data.id, projectName: data.name, projectDescription: data.description}\n        this.setState({\n            backlogProjects: [...this.state.backlogProjects, project],\n            inputBox: false\n    })\n    }\n\n    cancelProject = () => {\n        this.setState({\n            inputBox: false\n        })\n    }\n\n    moveToInProgress = (id, fromColumn) => {\n        var project;\n        if (fromColumn == \"backlog\"){\n            project = this.state.backlogProjects.filter((item) => item.projectId == id )[0];\n            const newProjectList = this.state.backlogProjects.filter((item) => item.projectId !== id );\n            this.setState({\n                backlogProjects: newProjectList\n            })\n        }\n\n\n    }\n\n\n\n    render(){\n        return(\n            <div className=\"projectboard\">\n                <Column id=\"done\" name=\"Done\"\n                    inputBox={this.state.inputBox}\n                    projects={this.state.doneProjects}\n                    removeProjectReal={this.removeProjectReal.bind(this)}\n                    addProjects={this.addProjects}\n                    saveProject={this.saveProject.bind(this)}\n                    cancelProject={this.cancelProject}/>\n                \n                <Column id=\"in-progress\" name=\"In Progress\"\n                    inputBox={this.state.inputBox}\n                    projects={this.state.inProgressProjects}\n                    removeProjectReal={this.removeProjectReal.bind(this)}\n                    addProjects={this.addProjects}\n                    saveProject={this.saveProject.bind(this)}\n                    cancelProject={this.cancelProject}/>\n                \n                <Column id=\"backlog\" name=\"Backlog\"\n                    inputBox={this.state.inputBox}\n                    projects={this.state.backlogProjects}\n                    removeProjectReal={this.removeProjectReal.bind(this)}\n                    addProjects={this.addProjects}\n                    saveProject={this.saveProject.bind(this)}\n                    cancelProject={this.cancelProject}/>\n            </div> \n        );\n    }\n\n\n\n\n    async fetchProjects() {\n        console.log(\"in fetch\")\n        const response = await fetch('http://localhost:5000/api/projects');\n        return response.json();\n        \n    }\n\n    async postProject(body){\n        console.log(\"in save\")\n        const response = await fetch('http://localhost:5000/api/projects', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify(body)\n        })\n        return response.json()\n        \n    }\n\n    async deleteProject(id){\n        const response = await fetch(`http://localhost:5000/api/projects/${id}`, {\n            method: 'DELETE',\n            mode: 'cors',\n        })\n        return response\n    }\n\n\n\n\n}\n\n\n\nexport default ProjectBoard"]},"metadata":{},"sourceType":"module"}