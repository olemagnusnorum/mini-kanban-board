{"ast":null,"code":"var _jsxFileName = \"/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/column.js\";\nimport Project from \"./project\";\nimport ProjectForm from \"./projectForm\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Column extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      projects: [],\n      inputBox: false\n    };\n\n    this.removeProject = id => {\n      console.log(id);\n      const newProjectList = this.state.projects.filter(item => item.projectId !== id);\n      this.setState({\n        projects: newProjectList\n      });\n    };\n\n    this.addProjects = () => {\n      this.setState({\n        inputBox: true\n      });\n      console.log(this.state.inputBox);\n    };\n\n    this.saveProject = newProject => {\n      console.log(newProject);\n      this.setState({\n        projects: [...this.state.projects, newProject],\n        inputBox: false\n      });\n    };\n\n    this.cancelProject = () => {\n      this.setState({\n        inputBox: false\n      });\n    };\n  }\n\n  async componentDidMount() {\n    var arr = [];\n\n    if (this.props.id == \"backlog\") {\n      console.log(\"inif\");\n      var data = await this.fetchProjects();\n      console.log(data[0].id);\n      data.map(d => {\n        const project = {\n          projectId: d.id,\n          projectName: d.name,\n          projectDescription: d.description\n        };\n        arr.push(project);\n      });\n      console.log(arr);\n    }\n\n    this.setState({\n      projects: [...this.state.projects, ...arr]\n    });\n  }\n\n  //her må vi poste til backend\n  async saveProjectReal(newProject) {\n    const body = {\n      Name: newProject.projectName,\n      Description: newProject.Description\n    };\n    const data = await this.postProject(body);\n    console.log(data);\n    this.setState({\n      inputBox: false\n    });\n  }\n\n  render() {\n    console.log(\"rendereing\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: this.props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), this.props.id == \"backlog\" && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addProjects,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), this.props.id == \"backlog\" && this.state.projects.map(project => /*#__PURE__*/_jsxDEV(Project, {\n        id: project.projectId,\n        name: project.projectName,\n        description: project.projectDescription,\n        removeProject: this.removeProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 83\n      }, this)), this.state.inputBox && /*#__PURE__*/_jsxDEV(ProjectForm, {\n        saveProject: this.saveProjectReal.bind(this),\n        cancelProject: this.cancelProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n  async fetchProjects() {\n    console.log(\"in fetch\");\n    const response = await fetch('http://localhost:5000/api/projects');\n    return response.json();\n  }\n\n  async postProject(body) {\n    console.log(\"in save\");\n    const response = await fetch('http://localhost:5000/api/projects', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    return response.json();\n  }\n\n}\n\nexport default Column;","map":{"version":3,"sources":["/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/column.js"],"names":["Project","ProjectForm","React","Component","Column","state","projects","inputBox","removeProject","id","console","log","newProjectList","filter","item","projectId","setState","addProjects","saveProject","newProject","cancelProject","componentDidMount","arr","props","data","fetchProjects","map","d","project","projectName","name","projectDescription","description","push","saveProjectReal","body","Name","Description","postProject","render","bind","response","fetch","json","method","mode","headers","JSON","stringify"],"mappings":"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","sourcesContent":["\nimport Project from \"./project\"\nimport ProjectForm from \"./projectForm\"\nimport React, {Component} from \"react\"\n\n\nclass Column extends Component {\n\n    \n    state = {\n        projects: [],\n        inputBox: false\n    }\n    \n    async componentDidMount() {\n       \n        var arr = []\n        if (this.props.id == \"backlog\"){\n            console.log(\"inif\")\n            var data = await this.fetchProjects()\n            console.log(data[0].id)\n            data.map(d => {\n                const project = {projectId: d.id, projectName: d.name, projectDescription: d.description}\n                arr.push(project)\n            })\n            console.log(arr)\n            \n        }\n        this.setState({projects: [...this.state.projects, ...arr]})\n\n    }\n    \n    \n    removeProject = (id) => {\n        console.log(id)\n        const newProjectList = this.state.projects.filter((item) => item.projectId !== id );\n        this.setState({\n            projects: newProjectList\n        })\n    }\n    \n     \n    addProjects = () => {\n        this.setState({\n            inputBox: true\n        })\n        console.log(this.state.inputBox)\n    }\n    \n    saveProject = (newProject) => {\n        console.log(newProject);\n\n        \n        this.setState({\n            projects: [...this.state.projects, newProject],\n            inputBox: false\n        })\n    }\n    \n    //her må vi poste til backend\n    async saveProjectReal(newProject) {\n        const body = { Name: newProject.projectName, Description: newProject.Description}\n        const data = await this.postProject(body)\n        console.log(data)\n        this.setState({\n            inputBox: false\n    })\n    }\n\n    cancelProject = () => {\n        this.setState({\n            inputBox: false\n        })\n    }\n\n    render(){\n        console.log(\"rendereing\")\n        return (\n            <div className=\"column\">\n                <div>\n                    <h1>{this.props.name}</h1>\n                    {this.props.id == \"backlog\" &&\n                    <button onClick={this.addProjects}>Create</button>\n                    }\n                </div>\n\n                {this.props.id == \"backlog\" && this.state.projects.map(project => <Project id={project.projectId} name={project.projectName} description={project.projectDescription} removeProject={this.removeProject}/>)}\n                {this.state.inputBox && <ProjectForm saveProject={this.saveProjectReal.bind(this)} cancelProject={this.cancelProject}/>}\n            </div>\n        );\n    }\n\n    async fetchProjects() {\n        console.log(\"in fetch\")\n        const response = await fetch('http://localhost:5000/api/projects');\n        return response.json();\n        \n    }\n\n    async postProject(body){\n        console.log(\"in save\")\n        const response = await fetch('http://localhost:5000/api/projects', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify(body)\n        })\n        return response.json()\n        \n    }\n\n\n}\n\n\n\nexport default Column"]},"metadata":{},"sourceType":"module"}