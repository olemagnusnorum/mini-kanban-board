{"ast":null,"code":"var _jsxFileName = \"/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/column.js\";\nimport Project from \"./project\";\nimport ProjectForm from \"./projectForm\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Column extends Component {\n  constructor(props) {\n    super(props);\n\n    this.removeProject = id => {\n      console.log(id);\n      const newProjectList = this.state.projects.filter(item => item.projectId !== id);\n      this.setState({\n        projects: newProjectList\n      });\n    };\n\n    this.addProjects = () => {\n      this.setState({\n        inputBox: true\n      });\n      console.log(this.state.inputBox); //her må vi poste til backend\n    };\n\n    this.saveProject = newProject => {\n      this.setState({\n        projects: [...this.state.projects, newProject],\n        inputBox: false\n      });\n    };\n\n    this.saveProjectreal = () => {};\n\n    this.cancelProject = () => {\n      this.setState({\n        inputBox: false\n      });\n    };\n\n    if (this.props.id == \"backlog\") {\n      console.log(\"inif\");\n      this.fetchProjects();\n    }\n\n    this.state = {\n      projects: [{\n        projectId: 1,\n        projectName: \"TestProject\",\n        projectDescription: \"this is a test\"\n      }, {\n        projectId: 2,\n        projectName: \"KKKKKK\",\n        projectDescription: \"this is a test\"\n      }],\n      inputBox: false\n    };\n  }\n\n  render() {\n    console.log(\"rendereing\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: this.props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), this.props.id == \"backlog\" && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addProjects,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), this.props.id == \"backlog\" && this.state.projects.map(project => /*#__PURE__*/_jsxDEV(Project, {\n        id: project.projectId,\n        name: project.projectName,\n        description: project.projectDescription,\n        removeProject: this.removeProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 83\n      }, this)), this.state.inputBox && /*#__PURE__*/_jsxDEV(ProjectForm, {\n        saveProject: this.saveProject,\n        cancelProject: this.cancelProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n  async fetchProjects() {\n    var response = await axiso('http://localhost:5000/api/projects');\n    const data = await response.json();\n    console.log(data);\n  }\n\n}\n\nexport default Column;","map":{"version":3,"sources":["/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/column.js"],"names":["Project","ProjectForm","React","Component","Column","constructor","props","removeProject","id","console","log","newProjectList","state","projects","filter","item","projectId","setState","addProjects","inputBox","saveProject","newProject","saveProjectreal","cancelProject","fetchProjects","projectName","projectDescription","render","name","map","project","response","axiso","data","json"],"mappings":"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","sourcesContent":["\nimport Project from \"./project\"\nimport ProjectForm from \"./projectForm\"\nimport React, {Component} from \"react\"\n\n\nclass Column extends Component {\n\n    constructor(props){\n        super(props)\n\n\n\n        if (this.props.id == \"backlog\"){\n            console.log(\"inif\")\n            this.fetchProjects()\n        }\n       \n        this.state = {\n            projects: [{projectId: 1, projectName: \"TestProject\", projectDescription: \"this is a test\"},\n                        {projectId: 2, projectName: \"KKKKKK\", projectDescription: \"this is a test\"}],\n            inputBox: false\n        }\n    }\n\n\n    removeProject = (id) => {\n        console.log(id)\n        const newProjectList = this.state.projects.filter((item) => item.projectId !== id );\n        this.setState({\n            projects: newProjectList\n        })\n    }\n    \n     \n    addProjects = () => {\n        this.setState({\n            inputBox: true\n        })\n        console.log(this.state.inputBox)\n        //her må vi poste til backend\n    }\n\n    saveProject = (newProject) => {\n\n        this.setState({\n            projects: [...this.state.projects, newProject],\n            inputBox: false\n        })\n    }\n\n    saveProjectreal = () => {\n\n    }\n\n    cancelProject = () => {\n        this.setState({\n            inputBox: false\n        })\n    }\n\n    render(){\n        console.log(\"rendereing\")\n        return (\n            <div className=\"column\">\n                <div>\n                    <h1>{this.props.name}</h1>\n                    {this.props.id == \"backlog\" &&\n                    <button onClick={this.addProjects}>Create</button>\n                    }\n                </div>\n\n                {this.props.id == \"backlog\" && this.state.projects.map(project => <Project id={project.projectId} name={project.projectName} description={project.projectDescription} removeProject={this.removeProject}/>)}\n                {this.state.inputBox && <ProjectForm saveProject={this.saveProject} cancelProject={this.cancelProject}/>}\n            </div>\n        );\n    }\n\n    async fetchProjects() {\n        var response = await axiso('http://localhost:5000/api/projects');\n        const data = await response.json();\n        console.log(data)\n        \n    }\n\n\n}\n\n\n\nexport default Column"]},"metadata":{},"sourceType":"module"}