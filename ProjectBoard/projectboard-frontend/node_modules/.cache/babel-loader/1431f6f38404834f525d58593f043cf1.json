{"ast":null,"code":"var _jsxFileName = \"/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/column.js\";\nimport Project from \"./project\";\nimport ProjectForm from \"./projectForm\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Column extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      projects: [],\n      inputBox: false\n    };\n\n    this.removeProject = id => {\n      console.log(id);\n      const newProjectList = this.state.projects.filter(item => item.projectId !== id);\n      this.setState({\n        projects: newProjectList\n      });\n    };\n\n    this.addProjects = () => {\n      this.setState({\n        inputBox: true\n      });\n      console.log(this.state.inputBox);\n    };\n\n    this.cancelProject = () => {\n      this.setState({\n        inputBox: false\n      });\n    };\n  }\n\n  async componentDidMount() {\n    var arr = [];\n\n    if (this.props.id == \"backlog\") {\n      console.log(\"inif\");\n      var data = await this.fetchProjects();\n      console.log(data[0].id);\n      data.map(d => {\n        const project = {\n          projectId: d.id,\n          projectName: d.name,\n          projectDescription: d.description\n        };\n        arr.push(project);\n      });\n      console.log(arr);\n    }\n\n    this.setState({\n      projects: [...this.state.projects, ...arr]\n    });\n  }\n\n  //må bruke DELETE fetch\n  async removeProjectReal(id) {\n    response = await this.deleteProject(id);\n    console.log(response);\n    const newProjectList = this.state.projects.filter(item => item.projectId !== id);\n    this.setState({\n      projects: newProjectList\n    });\n  }\n\n  //her må vi poste til backend\n  async saveProject(newProject) {\n    const body = {\n      Name: newProject.projectName,\n      Description: newProject.projectDescription\n    };\n    const data = await this.postProject(body);\n    console.log(data); //need to have data on right format\n\n    const project = {\n      projectId: data.id,\n      projectName: data.name,\n      projectDescription: data.description\n    };\n    this.setState({\n      projects: [...this.state.projects, project],\n      inputBox: false\n    });\n  }\n\n  render() {\n    console.log(\"rendereing\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: this.props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), this.props.id == \"backlog\" && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.addProjects,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), this.props.id == \"backlog\" && this.state.projects.map(project => /*#__PURE__*/_jsxDEV(Project, {\n        id: project.projectId,\n        name: project.projectName,\n        description: project.projectDescription,\n        removeProject: this.removeProject.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 83\n      }, this)), this.state.inputBox && /*#__PURE__*/_jsxDEV(ProjectForm, {\n        saveProject: this.saveProject.bind(this),\n        cancelProject: this.cancelProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n  async fetchProjects() {\n    console.log(\"in fetch\");\n    const response = await fetch('http://localhost:5000/api/projects');\n    return response.json();\n  }\n\n  async postProject(body) {\n    console.log(\"in save\");\n    const response = await fetch('http://localhost:5000/api/projects', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    return response.json();\n  }\n\n  async deleteProject(id) {\n    const response = await fetch(`http://localhost:5000/api/projects/${id}`, {\n      method: 'DELETE',\n      mode: 'cors'\n    });\n    return response.json();\n  }\n\n}\n\nexport default Column;","map":{"version":3,"sources":["/Users/ole-magnusnorum/Documents/IT_verket/prep/ProjectBoard/projectboard-frontend/src/components/column.js"],"names":["Project","ProjectForm","React","Component","Column","state","projects","inputBox","removeProject","id","console","log","newProjectList","filter","item","projectId","setState","addProjects","cancelProject","componentDidMount","arr","props","data","fetchProjects","map","d","project","projectName","name","projectDescription","description","push","removeProjectReal","response","deleteProject","saveProject","newProject","body","Name","Description","postProject","render","bind","fetch","json","method","mode","headers","JSON","stringify"],"mappings":"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","sourcesContent":["\nimport Project from \"./project\"\nimport ProjectForm from \"./projectForm\"\nimport React, {Component} from \"react\"\n\n\nclass Column extends Component {\n\n    \n    state = {\n        projects: [],\n        inputBox: false\n    }\n    \n    async componentDidMount() {\n       \n        var arr = []\n        if (this.props.id == \"backlog\"){\n            console.log(\"inif\")\n            var data = await this.fetchProjects()\n            console.log(data[0].id)\n            data.map(d => {\n                const project = {projectId: d.id, projectName: d.name, projectDescription: d.description}\n                arr.push(project)\n            })\n            console.log(arr)\n            \n        }\n        this.setState({projects: [...this.state.projects, ...arr]})\n\n    }\n    \n    \n    removeProject = (id) => {\n        console.log(id)\n        const newProjectList = this.state.projects.filter((item) => item.projectId !== id );\n        this.setState({\n            projects: newProjectList\n        })\n    }\n\n    //må bruke DELETE fetch\n    async removeProjectReal(id) {\n        response = await this.deleteProject(id)\n        console.log(response)\n        const newProjectList = this.state.projects.filter((item) => item.projectId !== id );\n        this.setState({\n            projects: newProjectList\n        })\n\n    }\n    \n     \n    addProjects = () => {\n        this.setState({\n            inputBox: true\n        })\n        console.log(this.state.inputBox)\n    }\n    \n    \n    //her må vi poste til backend\n    async saveProject(newProject) {\n        const body = { Name: newProject.projectName, Description: newProject.projectDescription}\n        const data = await this.postProject(body)\n        console.log(data)\n        //need to have data on right format\n        const project = {projectId: data.id, projectName: data.name, projectDescription: data.description}\n        this.setState({\n            projects: [...this.state.projects, project],\n            inputBox: false\n    })\n    }\n\n    cancelProject = () => {\n        this.setState({\n            inputBox: false\n        })\n    }\n\n    render(){\n        console.log(\"rendereing\")\n        return (\n            <div className=\"column\">\n                <div>\n                    <h1>{this.props.name}</h1>\n                    {this.props.id == \"backlog\" &&\n                    <button onClick={this.addProjects}>Create</button>\n                    }\n                </div>\n\n                {this.props.id == \"backlog\" && this.state.projects.map(project => <Project id={project.projectId} name={project.projectName} description={project.projectDescription} removeProject={this.removeProject.bind(this)}/>)}\n                {this.state.inputBox && <ProjectForm saveProject={this.saveProject.bind(this)} cancelProject={this.cancelProject}/>}\n            </div>\n        );\n    }\n\n    async fetchProjects() {\n        console.log(\"in fetch\")\n        const response = await fetch('http://localhost:5000/api/projects');\n        return response.json();\n        \n    }\n\n    async postProject(body){\n        console.log(\"in save\")\n        const response = await fetch('http://localhost:5000/api/projects', {\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify(body)\n        })\n        return response.json()\n        \n    }\n\n    async deleteProject(id){\n        const response = await fetch(`http://localhost:5000/api/projects/${id}`, {\n            method: 'DELETE',\n            mode: 'cors',\n        })\n        return response.json()\n    }\n\n\n}\n\n\n\nexport default Column"]},"metadata":{},"sourceType":"module"}